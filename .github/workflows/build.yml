name: Build and Release Pomodoro Timer

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        go-version: ['1.22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: |
          go install github.com/akavel/rsrc@latest
          go install github.com/fyne-io/fyne-cross@latest

      - name: Prepare resources
        run: |
          # 创建 manifest 文件
          New-Item -Path xtimer.manifest -ItemType File -Value @"
          <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
          <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
            <assemblyIdentity 
              version="1.0.0.0"
              processorArchitecture="amd64"
              name="XTimer"
              type="win32"
            />
            <description>Pomodoro Timer Application</description>
            <dependency>
              <dependentAssembly>
                <assemblyIdentity
                  type="win32"
                  name="Microsoft.Windows.Common-Controls"
                  version="6.0.0.0"
                  processorArchitecture="amd64"
                  publicKeyToken="6595b64144ccf1df"
                  language="*"
                />
              </dependentAssembly>
            </dependency>
          </assembly>
          "@
          
          # 转换 PNG 为 ICO (需要安装 ImageMagick)
          choco install imagemagick -y
          magick convert assets/logo.png -define icon:auto-resize=256,128,64,48,32,16 assets/logo.ico

      - name: Generate resource file
        run: rsrc -manifest xtimer.manifest -ico assets/logo.ico -o rsrc.syso

      - name: Build Windows executable
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $env:CGO_ENABLED = "1"
          go build -ldflags="-s -w -H=windowsgui" -o XTimer.exe main.go

      - name: Compress executable
        run: |
          choco install upx -y
          upx --best XTimer.exe

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: XTimer-Windows
          path: XTimer.exe

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        go-version: ['1.22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: |
          go install github.com/fyne-io/fyne-cross@latest

      - name: Build macOS universal binary
        run: |
          # 构建 Intel 版本
          GOOS=darwin GOARCH=amd64 go build -o XTimer-intel main.go
          
          # 构建 Apple Silicon 版本
          GOOS=darwin GOARCH=arm64 go build -o XTimer-arm64 main.go
          
          # 创建通用二进制
          lipo -create -output XTimer XTimer-intel XTimer-arm64
          rm XTimer-intel XTimer-arm64
          
          # 创建应用包
          mkdir -p XTimer.app/Contents/MacOS
          mkdir -p XTimer.app/Contents/Resources
          mv XTimer XTimer.app/Contents/MacOS/XTimer
          cp assets/logo.png XTimer.app/Contents/Resources/icon.png
          
          # 创建 Info.plist
          cat > XTimer.app/Contents/Info.plist <<EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>XTimer</string>
              <key>CFBundleIconFile</key>
              <string>icon</string>
              <key>CFBundleIdentifier</key>
              <string>com.example.xtimer</string>
              <key>CFBundleName</key>
              <string>XTimer</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0.0</string>
              <key>CFBundleVersion</key>
              <string>1</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.15</string>
          </dict>
          </plist>
          EOL

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: XTimer-macOS
          path: XTimer.app

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Build Linux executable
        run: |
          GOOS=linux GOARCH=amd64 go build -o XTimer-linux main.go

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: XTimer-Linux
          path: XTimer-linux

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/XTimer-Windows/XTimer.exe
            artifacts/XTimer-macOS/XTimer.app
            artifacts/XTimer-Linux/XTimer-linux
          tag_name: v1.0.0
          name: Release v1.0.0
          body: |
            Pomodoro Timer Application
            - Windows: XTimer.exe
            - macOS: XTimer.app
            - Linux: XTimer-linux
          draft: false
          prerelease: false